Условие:
https://3.shkolkovo.online/catalog/4419/49380?SubjectId=30
Решение:
def f(n):
    if n == 0:
        return 0
    if n > 0 and n % 2 == 0:
        return f(n / 2)
    if n % 2 != 0:
        return 1 + f(n - 1)


for x in range(10000):
    if f(x) == 12:
        print(x)
        break


Условие:
https://3.shkolkovo.online/catalog/4419/5971?SubjectId=30
Решение:
def f(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n == 3:
        return 4
    elif n > 3:
        return 5 * f(n - 1) + 3 * f(n - 3)


print(f(5))

Условие:
https://inf-ege.sdamgia.ru/problem?id=58226
Решение:
def F(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    elif n > 2 and n % 2 == 0:
        return round((3 * n + F(n - 3)) / 3)
    elif n > 2 and n % 2 != 0:
        return round((7 * n + F(n - 1) - F(n - 2)) / 5)


print(F(35))

Условие:
https://3.shkolkovo.online/catalog/4419/25989?SubjectId=30
Решение:
def F(n):
    if n == 0:
        return 0
    elif n % 3 == 0 and n % 2 != 0 and n % 5 != 0:
        return 3 * F(n // 3)
    elif n % 3 == 0 and n % 2 != 0 and n % 5 == 0:
        return 2 * F(n // 2)
    elif n % 3 != 0 and n % 2 != 0 and n % 5 == 0:
        return 5 * F(n // 5)
    else:
        return 2 * n


print(sum(list(filter(lambda x: 1000 <= F(x) <= 3000, range(0, 10000000, 2)))))


Условие:
# Алгоритм вычисления значения функции F(n), где n – целое число, задан следующими соотношениями:
# F(n) = n, при n ≤ 5,
# F(n) = n + F(n//5 + 1), когда n > 5 и делится на 5,
# F(n) = n + F(n + 6) , когда n > 5 и не делится на 5.
# Назовите минимальное значение n, для которого F(n) определено и больше 1000.
Решение:
from functools import lru_cache


@lru_cache
def F(n):
    if n <= 5:
        return n
    elif n > 5 and n % 5 == 0:
        return n + F(n // 5 + 1)
    elif n > 5 and n % 5 != 0:
        return n + F(n + 6)


for n in range(5, 1000):
    try:
        if F(n) > 1000:
            print(n)
            break
    except RecursionError:
        print(f'Change {n} bitch')

Условие:
https://3.shkolkovo.online/catalog/4420/60486?SubjectId=30
Решение:
from functools import lru_cache


@lru_cache()
def F(n):
    def G(n):
        if n <= 2:
            return n - 1
        elif n > 2:
            return F(n - 1) + G(n - 1)

    if n <= 2:
        return n ** 2
    elif n > 2:
        return G(n - 2) - F(n - 2) + 8


for n in range(100):
    if F(n) == 6607:
        print(n)
        break

Условие:
https://3.shkolkovo.online/catalog/4420/60482?SubjectId=30
Решение:
def F(n):
    def G(n):
        if n <= 3:
            return 2
        elif n > 3:
            return G(n - 1) - F(n - 2) + 2

    if n <= 2:
        return 1
    elif n > 2:
        return F(n - 1) + G(n - 2) - 2


print(F(31))

Условие:
https://3.shkolkovo.online/catalog/4420/58970?SubjectId=30
Решение:
def G(n):
    def F(n):
        if n == 1:
            return 2
        elif n > 1:
            return G(n - 1) * F(n - 1) - n ** n

    if n == 1:
        return 2
    elif n > 1:
        return 5 * F(n - 1) - n * G(n - 1)


print(G(5))

Условие:
https://3.shkolkovo.online/catalog/4420/30453?SubjectId=30
Решение:
from functools import lru_cache


@lru_cache()
def F(n):
    def G(n):
        if n < 12 and n % 3 != 0:
            return F(n - 1) + n
        elif n < 12 and n % 3 == 0:
            return G(n - 1) + F(n // 3) - n
        else:
            return n * n

    if n < 12:
        return n
    elif n > 11 and n % 2 == 0:
        return G(n // 2) * 2 - F(n - 1)
    elif n > 11 and n % 2 != 0:
        return - G(n - 1)


print(max(list(filter(lambda n: sum(map(int, str(abs(F(n))))) == 33, range(1, 1001)))))

Условие:
https://3.shkolkovo.online/catalog/4420/26068?SubjectId=30
Решение:
def f(n):
    if n <= 10:
        return n
    elif n > 10 and n % 10 == 0:
        return f(n % 5) + 1
    else:
        return n * f(n - 1)


def g(n):
    if n >= 21:
        return n * n + 1 * n + 3
    elif n < 21 and n % 2 == 0:
        return 2 * g(n - 2) * g(n - 4)
    else:
        return 2 * g(n - 1) * g(n - 3)


a = f(g(f(g(22))))
print(sum(map(int, str(a))))

Условие:
Определите наименьшее значение n, при котором сумма чисел, которые будут
выведены при вызове F(n), будет больше 3200000. Запишите в ответе сначала
найденное значение n, а затем через пробел – соответствующую сумму выведенных
чисел.
python:
def F(n):
  print(n*n)
  if n > 1:
    print(2*n+1)
    F(n-2)
    F(n//3)
Ответ: 199 3238315
Решение:
count = 0


def f(n):
    global count
    if n > 1:
        f(n - 2)
        f(n // 3)
        count += 2 * n + 1
    count += n * n


for i in range(100, 700):
    count = 0
    a = f(i)
    if count > 3200000:
        print(i, a)
        break

Условие:
Алгоритм вычисления функции F(n), где n – целое число, задан следующими
соотношениями:
F(n) = 3n, если n < 3
F(n) = F(n – 2) · F(n – 1) – n, если n > 2 и число n чётное,
F(n) = F(n – 1) – F(n – 2) + 2·n , если n > 2 и число n нечётное.
Вычислите последние две цифры значения F(30).
Ответ: 36
Решение:
import sys

sys.set_int_max_str_digits(3000000)
def f(n):
    if n < 3:
        return 3 * n
    elif n > 2 and n % 2 == 0:
        return f(n - 2) * f(n - 1) - n
    else:
        return f(n - 1) - f(n - 2) + 2 * n

print(str(f(30))[-2:])

Условие:
Алгоритм вычисления функции F(n) задан следующими соотношениями:
        F(n) = n · n + 2 · n + 1, при n > 25
        F(n) = 2 · F(n+1) + F(n+3), при чётных n ≤ 25
        F(n) = F(n+2) + 3 · F(n+5), при нечётных n ≤ 25
Определите количество натуральных значений n из отрезка [1; 1000], при которых
значение F(n) не содержит цифру 0.
Ответ: 575
Решение:
import sys

sys.setrecursionlimit(100000)
count = 0


def f(n):
    if n > 25:
        return n * n + 2 * n + 1
    elif n <= 25 and n % 2 == 0:
        return 2 * f(n + 1) + f(n + 3)
    else:
        return f(n + 2) + 3 * f(n + 5)


for n in range(1, 1001):
    a = str(f(n))
    if '0' not in a:
        count += 1
print(count)

Условие:
Алгоритм вычисления функции F(n), где n – целое число, задан следующими
соотношениями:
F(n) = n, при n ≤ 1,
F(n) = 1 + F(n / 2), когда n > 1 и чётное,
F(n) = 1 + F(n + 2) , когда n > 1 и нечётное.
Назовите минимальное значение n, для которого F(n) = 16.
Ответ: 32768
Решение:
from functools import lru_cache
from sys import setrecursionlimit

setrecursionlimit(100000)

@lru_cache()
def f(n):
    if n <= 1:
        return n
    elif n > 1 and n % 2 == 0:
        return 1 + f(n / 2)
    return 1 + f(n + 2)

for i in range(100000):
    try:
        if f(i) == 16:
            print(i)
            break
    except RecursionError:
        pass


Условие:
Алгоритм вычисления функции F(n), где n – целое неотрицательное число, задан
следующими соотношениями:
F(0) = 3
F(n) = F(n–1), при 0 < n ≤ 15
F(n) = 2,5*F(n–3), при 15 < n < 100
F(n) = 3,3*F(n–2), при n ≥ 100
С какой цифры начинается дробная часть значения функции F(100)?
Ответ: 6
Решение:
from functools import lru_cache
from sys import setrecursionlimit

setrecursionlimit(100000)


@lru_cache()
def f(n):
    if n == 0:
        return 3
    elif 0 < n <= 15:
        return f(n - 1)
    elif 15 < n < 100:
        return 2.5 * f(n - 3)
    elif n >= 100:
        return 3.3 * f(n - 2)


print(f(100))

Условие:
Алгоритм вычисления функций F(n) и G(n) задан следующими соотношениями:
        F(n) = G(n) = 1 при n = 1
        F(n) = F(n–1) + 3 · G(n–1), при n > 1
        G(n) = F(n–1) – 2 · G(n–1), при n > 1
Чему равна сумма цифр значения функции F(18)?
Ответ: 46
Решение:
from functools import lru_cache
from sys import setrecursionlimit

setrecursionlimit(100000)


@lru_cache()
def f(n):
    if n == 1:
        return 1
    elif n > 1:
        return f(n - 1) + 3 * g(n - 1)


@lru_cache()
def g(n):
    if n == 1:
        return 1
    elif n > 1:
        return f(n - 1) - 2 * g(n - 1)

print(sum(map(int, str(f(18)))))

Условие:
Обозначим частное от деления натурального числа a на натуральное число
b как a // b, а остаток как a%b.
Например, 17//3 = 5, 17%3 = 2.
Алгоритм вычисления функции F(n), где n – неотрицательное число,
задан следующими соотношениями:
F(n) = n, если n < 10,
F(n) = F(n//10) + F(n%10), если 10 ≤ n < 1000,
F(n) = F(n//1000) – F(n%1000), если n ≥ 1000.
Найдите количество чисел, не превышающих 10⁶, для которых F(n) = 0.
Ответ: 55252
Решение:
from functools import lru_cache
from sys import setrecursionlimit

setrecursionlimit(100000)


@lru_cache()
def f(n):
    if n < 10:
        return n
    elif 10 <= n < 1000:
        return f(n // 10) + f(n % 10)
    elif n >= 1000:
        return f(n // 1000) - f(n % 1000)


print(len(list(filter(lambda x: f(x) == 0, range(10 ** 6 + 1)))))
